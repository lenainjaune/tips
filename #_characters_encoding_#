# Cas pratique : j'ai une commande (ici depuis un terminal Linux qui accède par SSH à Cygwin) qui renvoie un texte peu lisible du au conversions d'accents
$ cmd /c "dir /?"
...
DIRCMD. Pour les ignorer, les pr�fixer avec un trait d'union. Par exemple /-W.

# Il faut déterminer quel est le problème d'encodage
$ cmd /c "dir /?" | od -ct u1
...
0004060   e   n   t  \r  \n   D   I   R   C   M   D   .       P   o   u
        101 110 116  13  10  68  73  82  67  77  68  46  32  80 111 117
0004100   r       l   e   s       i   g   n   o   r   e   r   ,       l
        114  32 108 101 115  32 105 103 110 111 114 101 114  44  32 108
0004120   e   s       p   r 202   f   i   x   e   r       a   v   e   c
        101 115  32 112 114 130 102 105 120 101 114  32  97 118 101  99
0004140       u   n       t   r   a   i   t       d   '   u   n   i   o
         32 117 110  32 116 114  97 105 116  32 100  39 117 110 105 111
0004160   n   .       P   a   r       e   x   e   m   p   l   e       /
        110  46  32  80  97 114  32 101 120 101 109 112 108 101  32  47
0004200   -   W   .  \r  \n
         45  87  46  13  10
0004205

# Nota : la commande od (Octal Dump - affichage en octal) de dessus `od -ct u1', affiche sur la 1ère ligne les caractères renvoyé par la commande (si ASCII étendu affiche plutôt le code du caractère en octal) et sur la 2ème ligne le code décimal non signé (= unsigned) associé sur 1 octet (=> valeurs de 0->255)

# On voit ici que le caractère problématique est le `é' de "préfixer" de code 130 en décimal (ASCII étendu donc affiché avec le code octal 202)

# Reste à déterminer quel encodage fait que le `é' soit traduit par le code 130 : recherche de "e acute 130"

# Il s'agirait du CP850 (DOS Latin 1 qui redéfinit l'ASCII en modifiant l'ASCII étendu [1])

# Pour s'en assurer :
$ cmd /c "echo ÇüéâäàåçêëèïîìÄÅ" | od -ct u1
0000000 200 201 202 203 204 205 206 207 210 211 212 213 214 215 216 217
        128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
0000020  \r  \n
         13  10
0000022

# Qui doit correspondre avec l'encodage de code 850 (DOS Latin 1) — mode standard (https://fr.wikipedia.org/wiki/Page_de_code_850) :
#   	0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	A 	B 	C 	D 	E 	F
#8x 	"Ç" 	"ü" 	"é" 	"â" 	"ä" 	"à" 	"å" 	"ç" 	"ê" 	"ë" 	"è" 	"ï" 	"î" 	"ì" 	"Ä" 	"Å"
# nota : 8x c'est en base héxadécimal soit en décimal 128 (8x16) à 143 (128 + 15)

# => c'est bien le cas !


# Au final on convertit l'encodage
$ cmd /c "dir /?" | iconv -f cp850 -t utf8//TRANSLIT
...
DIRCMD. Pour les ignorer, les préfixer avec un trait d'union. Par exemple /-W.
# iconv permet de convertir l'encodage de manière à l'afficher correctement depuis le terminal

# Mission accomplie !

# Nota : si on utilise directement mintty (le terminal Cygwin depuis Windows) on peut utiliser la même solution (ou alors changer le jeu de caractères dans les options en CP850)


# Autre exemple depuis un terminal bash sous Linux (la commande liste les installations de correctifs Windows Update) :
ssh user@computer-w7p "wevtutil qe system /f:text \"/q:*[System[Provider[@Name='Microsoft-Windows-WindowsUpdateClient'] and (EventID=19)]]\"" |
...
Installation r�ussie�: Windows a install� la mise � jour suivante�: Mise � jour pour Windows (KB3125574)

ssh user@computer-w7p "wevtutil qe system /f:text \"/q:*[System[Provider[@Name='Microsoft-Windows-WindowsUpdateClient'] and (EventID=19)]]\"" | od -ct u1
...
0007040   a       i   n   s   t   a   l   l 351       l   a       m   i
         97  32 105 110 115 116  97 108 108 233  32 108  97  32 109 105
0007060   s   e     340       j   o   u   r       s   u   i   v   a   n
        115 101  32 224  32 106 111 117 114  32 115 117 105 118  97 110
0007100   t   e 240   :       M   i   s   e     340       j   o   u   r
        116 101 160  58  32  77 105 115 101  32 224  32 106 111 117 114
0007120       p   o   u   r       W   i   n   d   o   w   s       (   K
         32 112 111 117 114  32  87 105 110 100 111 119 115  32  40  75
0007140   B   3   1   2   5   5   7   4   )  \r  \n  \r  \n
         66  51  49  50  53  53  55  52  41  13  10  13  10

# Cette fois le `é' est encodé avec le code décimal 233 (351 en octal), ce qui indiquerait qu'il est en CP1252 le premier encodage de Windows (Windows-1252) successeur de CP850

# Vérification :
ssh user@$UPDATED_HOST "wevtutil qe system /f:text \"/q:*[System[Provider[@Name='Microsoft-Windows-WindowsUpdateClient'] and (EventID=19)]]\"" | iconv -f cp1252 -t utf8//TRANSLIT
...
Installation réussie : Windows a installé la mise à jour suivante : Mise à jour pour Windows (KB3125574)

# Succès !

[1] l'ASCII étendu définit les caractères 128 à 255, en particulier le code décimal ASCII du `é' est 233 alors que pour coder ce même caractère en CP850 il est à 130



# From Windows
# si on récupère des données d'un fichier Windows on peut avoir certains problèmes

# il faut supprimer les CR
cat fichier | tr -d '\r'

# si on utilise des commandes comme awk il faut remplacer les caractères non ASCII (> 127)
# non ASCII par leur numero octal (\200 = 128 et \377 = 255)
cat fichier | tr '\200-\377' '?'



# Analyse MBR

Temporaire en vrac avant de finaliser

# [1] https://knowitlikepro.com/understanding-master-boot-record-mbr/
# [2] http://poloastucien.free.fr/mbr_fat_secteurs_boot_h.html#1
# => détaillent le MBR (systèmes Windows)

# [12] http://multibooters.com/tutorials/view-and-change-disk-signature-in-mbr.html
# => signature du disque sur Windows

# [4] https://www.lifewire.com/what-is-the-master-boot-code-2625934
# => détaille le MBC (voir plus bas)


# [3] https://doc.ubuntu-fr.org/tutoriel/lubuntu_usb_creator#support_bootable_et_mbr
# => ma 1ère vraie exploration

# ATTENTION : un point litigeux pour la signature du disque (qui n'est pas le serial, ni l'identifiant) car selon [1] elle serait sur 7 octets en 1b5-1bc alors que [12] indique 4 octets en 1b8-1bc qui se vérifie par les informations dans le registre.
=> signature du disque ???


user@host:~/Documents/mbr_understanding$ hexdump /dev/sda -n 512 -v -C
00000000  eb 63 90 10 8e d0 bc 00  b0 b8 00 00 8e d8 8e c0  |.c..............|
00000010  fb be 00 7c bf 00 06 b9  00 02 f3 a4 ea 21 06 00  |...|.........!..|
00000020  00 be be 07 38 04 75 0b  83 c6 10 81 fe fe 07 75  |....8.u........u|
00000030  f3 eb 16 b4 02 b0 01 bb  00 7c b2 80 8a 74 01 8b  |.........|...t..|
00000040  4c 02 cd 13 ea 00 7c 00  00 eb fe 00 00 00 00 00  |L.....|.........|
00000050  00 00 00 00 00 00 00 00  00 00 00 80 01 00 00 00  |................|
00000060  00 00 00 00 ff fa 90 90  f6 c2 80 74 05 f6 c2 70  |...........t...p|
00000070  74 02 b2 80 ea 79 7c 00  00 31 c0 8e d8 8e d0 bc  |t....y|..1......|
00000080  00 20 fb a0 64 7c 3c ff  74 02 88 c2 52 bb 17 04  |. ..d|<.t...R...|
00000090  f6 07 03 74 06 be 88 7d  e8 17 01 be 05 7c b4 41  |...t...}.....|.A|
000000a0  bb aa 55 cd 13 5a 52 72  3d 81 fb 55 aa 75 37 83  |..U..ZRr=..U.u7.|
000000b0  e1 01 74 32 31 c0 89 44  04 40 88 44 ff 89 44 02  |..t21..D.@.D..D.|
000000c0  c7 04 10 00 66 8b 1e 5c  7c 66 89 5c 08 66 8b 1e  |....f..\|f.\.f..|
000000d0  60 7c 66 89 5c 0c c7 44  06 00 70 b4 42 cd 13 72  |`|f.\..D..p.B..r|
000000e0  05 bb 00 70 eb 76 b4 08  cd 13 73 0d 5a 84 d2 0f  |...p.v....s.Z...|
000000f0  83 d0 00 be 93 7d e9 82  00 66 0f b6 c6 88 64 ff  |.....}...f....d.|
00000100  40 66 89 44 04 0f b6 d1  c1 e2 02 88 e8 88 f4 40  |@f.D...........@|
00000110  89 44 08 0f b6 c2 c0 e8  02 66 89 04 66 a1 60 7c  |.D.......f..f.`||
00000120  66 09 c0 75 4e 66 a1 5c  7c 66 31 d2 66 f7 34 88  |f..uNf.\|f1.f.4.|
00000130  d1 31 d2 66 f7 74 04 3b  44 08 7d 37 fe c1 88 c5  |.1.f.t.;D.}7....|
00000140  30 c0 c1 e8 02 08 c1 88  d0 5a 88 c6 bb 00 70 8e  |0........Z....p.|
00000150  c3 31 db b8 01 02 cd 13  72 1e 8c c3 60 1e b9 00  |.1......r...`...|
00000160  01 8e db 31 f6 bf 00 80  8e c6 fc f3 a5 1f 61 ff  |...1..........a.|
00000170  26 5a 7c be 8e 7d eb 03  be 9d 7d e8 34 00 be a2  |&Z|..}....}.4...|
00000180  7d e8 2e 00 cd 18 eb fe  47 52 55 42 20 00 47 65  |}.......GRUB .Ge|
00000190  6f 6d 00 48 61 72 64 20  44 69 73 6b 00 52 65 61  |om.Hard Disk.Rea|
000001a0  64 00 20 45 72 72 6f 72  0d 0a 00 bb 01 00 b4 0e  |d. Error........|
000001b0  cd 10 ac 3c 00 75 f4 c3  7b ba 0e 00 00 00 80 20  |...<.u..{...... |
000001c0  21 00 83 1a 3b 1f 00 08  00 00 00 98 07 00 00 3b  |!...;..........;|
000001d0  1b 1f 05 fe ff ff fe a7  07 00 02 b0 14 1d 00 00  |................|
000001e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|
00000200


user@host:~/Documents/mbr_understanding$ hexdump /dev/sda -n 512 -v -e '"%08_ax  " 8/1 "%02x "  "  " 8/1 "%02x "' -e ' "  |" 16/1 "%_p" "|\n"'
# => même résulat que la commande précédente mais cette fois c'est moi qui l'ai paramétré (note : avec ce réglage il n'y a pas la ligne vide de fin)
# Fonctionnement :
#  -n 512 : prend les 512 premiers octets
#  -v : n'elipse pas les lignes identiques avec *
#  -e '...' : affiche par tranche de 16 octets (voir [5])
#  -e '...' : (on reprend au début de l'ensemble à traiter) affiche les caractères imprimables de ces 16 octets (voir [6])
# En détail :
# [5] : -e '"%08_ax " 8/1 "%02x "  "  " 8/1 "%02x "'
#   - une unique fois, afficher adresse sur 4 octets en hexa avec un padding de 0 à gauche
#   - pour 8 fois 1 octet, afficher l'octet en hexa avec un padding de 0 à gauche puis séparer avec une espace
#   - une unique fois, séparer par 2 espaces
#   - refaire la même chose que dessus pour les 8 octets suivants
# [6] : -e ' "  |" 16/1 "%_p" "|\n"'
#   - une unique fois ajouter le délimiteur de début
#   - pour 16 fois 1 octet, afficher les caractères imprimables
#   - une unique fois, ajouter le délimiteur de fin et un saut de ligne
00000000  eb 63 90 10 8e d0 bc 00  b0 b8 00 00 8e d8 8e c0  |.c..............|
00000010  fb be 00 7c bf 00 06 b9  00 02 f3 a4 ea 21 06 00  |...|.........!..|
...


# [7] Variante de [5] avec les offsets à gauche en couleur cyan et avec la signature de fin de MBR coloré en jaune (extrait depuis exemple du man) :
user@host:~/Documents/mbr_understanding$ hexdump /dev/sda -n 512 -v -e '"%08_ax_L[cyan]  " 8/1 "%02x "  "  " 8/1 "%02x_L[green:0x55@510,green:0xaa@511,!red:0x55@510,!red:0xaa@511] "' -e ' "  |" 16/1 "%_p_L[yellow]" "|\n"'
# "%02x " -> "%02x_L[green:0x55@510,green:0xaa@511,!red:0x55@510,!red:0xaa@511] "
# => si octet 511 (offset par rapport au début : @510) == 0x55 et que 512 (@511) == 0xaa, alors on colore en vert, sinon en rouge


# [8] Variante de [7] où toutes les données du MBR sont colorées pour différencier les parties (réglage unique) :
user@host:~/Documents/mbr_understanding$ c='magenta@437-443,brown@0-445,cyan@446-461,blue@462-477,cyan@478-493,blue@494-509,green:0x55@510,green:0xaa@511,!red:0x55@510,!red:0xaa@511' ; hexdump /dev/sda -n 512 -v -e '"%08_ax  " 8/1 "%02x_L['$c'] "  "  " 8/1 "%02x_L['$c'] "' -e ' "  |" 16/1 "%_p_L['$c']" "|\n"'
=> MBC en marron, signature disque en magenta (prioritaire sur MBC), les 4 partitions et la signature en vert si reconnue, sinon en rouge


# [9] Variante de [8] avec le repérage des colonnes :
user@host:~/Documents/mbr_understanding$ printf "%0.s " {1..10} ; printf "%02x " {0..7} ; printf " " ; printf "%02x " {8..15} ; printf "    Decoded text \n" ; c='magenta@437-443,brown@0-445,cyan@446-461,blue@462-477,cyan@478-493,blue@494-509,green:0x55@510,green:0xaa@511,!red:0x55@510,!red:0xaa@511' ; hexdump /dev/sda -n 512 -v -e '"%08_ax  " 8/1 "%02x_L['$c'] " "  " 8/1 "%02x_L['$c'] "' -e ' "  |" 16/1 "%_p_L['$c']" "|\n"'
          00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f     Decoded text 
00000000  eb 63 90 10 8e d0 bc 00  b0 b8 00 00 8e d8 8e c0  |.c..............|
00000010  fb be 00 7c bf 00 06 b9  00 02 f3 a4 ea 21 06 00  |...|.........!..|
...


# [10] Variante de [9] pour ressembler à : https://knowitlikepro.com/understanding-master-boot-record-mbr/
user@host:~/Documents/mbr_understanding$ printf "Offset (h)  " ; printf "%02x " {0..7} ; printf "  " ; printf "%02x " {8..15} ; printf "   Decoded text \n" ; c='magenta@437-443,brown@0-445,cyan@446-461,blue@462-477,cyan@478-493,blue@494-509,green:0x55@510,green:0xaa@511,!red:0x55@510,!red:0xaa@511' ; hexdump /dev/sda -n 512 -v -e '"%010_ax  " 8/1 "%02x_L['$c'] "  "   " 8/1 "%02x_L['$c'] "' -e ' "  " 16/1 "%_p_L['$c']" "\n"'
Offset (h)  00 01 02 03 04 05 06 07   08 09 0a 0b 0c 0d 0e 0f    Decoded text 
0000000000  eb 63 90 10 8e d0 bc 00   b0 b8 00 00 8e d8 8e c0  .c..............
0000000010  fb be 00 7c bf 00 06 b9   00 02 f3 a4 ea 21 06 00  ...|.........!..
...


# [11] Variante de [7] de hexdump avec awk qui donne plus de flexibilité et plus de couleurs possibles MAIS hexdump offre plus de simplicité dans l'écriture des règles
user@host:~/Documents/mbr_understanding$ hexdump /dev/sda -n 512 -v -e '/1 "%02x,"' | awk -v RS="," -v dt="" '{ dt = dt ( sprintf ( "%c" , ( strtonum ( "0x" $0 ) < 0x20 || strtonum ( "0x" $0 ) > 0x7f ? "." : strtonum ( "0x" $0 ) ) ) ) ; if ( ( NR - 1 ) % 16 == 0 ) printf "\033[36m%08x\033[0m  " , ( NR - 1 ) ; cs = ( NR == 511 && $0 == "55" || NR == 512 && $0 == "aa" ) ? "\033[32m" : "" ; printf cs "%s\033[0m " , $0 ; if ( NR % 16 && NR % 8 == 0 ) printf " " ; if ( NR % 16 == 0 ) { printf " |\033[1;33m" dt "\033[0m|\n" ; dt = "" } }'
00000000  eb 63 90 10 8e d0 bc 00  b0 b8 00 00 8e d8 8e c0  |.c..............|
00000010  fb be 00 7c bf 00 06 b9  00 02 f3 a4 ea 21 06 00  |...|.........!..|
...



# La signature disque serait selon [4] de 1b5 à 1bb (7 octets)
# => ici, 


# MBC (Master Boot Code) : les 446 premiers octets

# Lister tous les octets du MBC

user@host:~/Documents/mbr_understanding$ hexdump /dev/sda -n 446 -v -e '/1 "%02x"' ; echo
eb6390108ed0bc00b0b800008ed88ec0fbbe007cbf0006b90002f3a4ea21060000bebe073804750b83c61081fefe0775f3eb16b402b001bb007cb2808a74018b4c02cd13ea007c0000ebfe00000000000000000000000000000000800100000000000000fffa9090f6c2807405f6c2707402b280ea797c000031c08ed88ed0bc0020fba0647c3cff740288c252bb1704f607037406be887de81701be057cb441bbaa55cd135a52723d81fb55aa753783e101743231c0894404408844ff894402c7041000668b1e5c7c66895c08668b1e607c66895c0cc744060070b442cd137205bb0070eb76b408cd13730d5a84d20f83d000be937de98200660fb6c68864ff40668944040fb6d1c1e20288e888f4408944080fb6c2c0e80266890466a1607c6609c0754e66a15c7c6631d266f73488d131d266f774043b44087d37fec188c530c0c1e80208c188d05a88c6bb00708ec331dbb80102cd13721e8cc3601eb900018edb31f6bf00808ec6fcf3a51f61ff265a7cbe8e7deb03be9d7de83400bea27de82e00cd18ebfe47525542200047656f6d0048617264204469736b005265616400204572726f720d0a00bb0100b40ecd10ac3c0075f4c37bba0e000000




# Afficher le code assembleur du MBC :
# Copier la liste des octets telle quelle et l'importer dans ODA en ligne en précisant la plateforme utilisée (voir dessous) : https://onlinedisassembler.com/odaweb/
# Note : dans mon cas j'ai utilisé la plateforme i386 (il n'y a pas de x64_86 et je pense que les jeux d'instruction doivent être les mêmes)
# Voir aussi le graph correspondant pour une représentation logique et visuelle du MBC (je n'ai pas réussi à exporter le SVG correspondant, donc j'ai pris des captures et j'ai sauvegardé la page)


# Table des partitions : 64 octets (4 partitions de 16 octets) : 

user@host:~/Documents/mbr_understanding$ hexdump /dev/sda -s 446 -n 64 -v -e '1/1 "%02x" 3/1 " %3d" 1/1 " %02x" 3/1 " %3d" 2/4 " %9d" "\n"'
80  32  33   0 83  26  59  31      2048    497664
00  59  27  31 05 254 255 255    501758 487895042
00   0   0   0 00   0   0   0         0         0
00   0   0   0 00   0   0   0         0         0
